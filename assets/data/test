const [products, setProducts] = useState([]);
const [error, setError] = useState({});
const [isLoading, setIsLoading] = useState(true);

const fetchData = async () => {
  try {
    const { data, error } = await supabase.from("products").select("*");
    setProducts(data); // Cập nhật trạng thái products trực tiếp
    setError(error);
    setIsLoading(false); // Set loading sang false sau khi lấy dữ liệu thành công
    setCategories(getCategoriesFromData(data) || []); // Cập nhật categories
  } catch (error) {
    console.error("Lỗi khi lấy dữ liệu:", error); // Ghi nhật ký lỗi để gỡ lỗi
    setError(error); // Cập nhật trạng thái lỗi nếu lấy dữ liệu thất bại
    setIsLoading(false); // Reset trạng thái tải
  }
};

const ListRef = useRef();
const [searchText, setSearchText] = useState("");

function resetsearchProduct() {
  ListRef?.current?.scrollToOffset({
    animated: true,
    offset: 0,
  });
  setCategoryIndex({ index: 0, category: categories[0] });
  // setsortedProduct([...productList]);
  setsortedProduct([...products]);
  setSearchText("");
}

useEffect(() => {
  fetchData();
}, []);

const [categories, setCategories] = useState([]);
const [categoryIndex, setCategoryIndex] = useState({});
const [sortedProduct, setsortedProduct] = useState([]);

useEffect(() => {}, [isLoading, products]);

useEffect(() => {
  console.log(categories);
  setCategoryIndex({
    index: 0,
    category: categories[0],
  });
}, [searchText]);

useEffect(() => {
  console.log(categories);
  setCategoryIndex({
    index: 0,
    category: categories[0],
  });
}, [searchText]);

useEffect(() => {
  if (products && categoryIndex) {
    const filteredProducts = products.filter((item) =>
      item?.name?.toLowerCase()?.includes(searchText?.toLowerCase())
    );
    setsortedProduct(getProductList(categoryIndex.category, filteredProducts));
  }

  if (searchText == "") {
    setsortedProduct(getProductList(categoryIndex.category, products));
  }
}, [products, categoryIndex, searchText]); // Cập nhật khi sản phẩm, danh mục hoặc văn bản tìm kiếm thay đổi

if (isLoading) {
  return <ActivityIndicator />;
}

if (error) {
  return <Text>Faild to fetch data</Text>;
}
